// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Resolvers
{
    using System;

    public class GeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<Type, int>(1)
            {
                { typeof(global::Assets.Scripts.OmaWatch.PlayerProfile), 0 },
            };
        }

        internal static object GetFormatter(Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new MessagePack.Formatters.Assets.Scripts.OmaWatch.PlayerProfileFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1649 // File name should match first type name




// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Assets.Scripts.OmaWatch
{
    using System;
    using System.Buffers;
    using System.Runtime.InteropServices;
    using MessagePack;

    public sealed class PlayerProfileFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Assets.Scripts.OmaWatch.PlayerProfile>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // SkipTutorial
        private static global::System.ReadOnlySpan<byte> GetSpan_SkipTutorial() => new byte[1 + 12] { 172, 83, 107, 105, 112, 84, 117, 116, 111, 114, 105, 97, 108 };
        // MusicVolume
        private static global::System.ReadOnlySpan<byte> GetSpan_MusicVolume() => new byte[1 + 11] { 171, 77, 117, 115, 105, 99, 86, 111, 108, 117, 109, 101 };
        // SFXVolume
        private static global::System.ReadOnlySpan<byte> GetSpan_SFXVolume() => new byte[1 + 9] { 169, 83, 70, 88, 86, 111, 108, 117, 109, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Assets.Scripts.OmaWatch.PlayerProfile value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(4);
            writer.WriteRaw(GetSpan_Id());
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_SkipTutorial());
            writer.Write(value.SkipTutorial);
            writer.WriteRaw(GetSpan_MusicVolume());
            writer.Write(value.MusicVolume);
            writer.WriteRaw(GetSpan_SFXVolume());
            writer.Write(value.SFXVolume);
        }

        public global::Assets.Scripts.OmaWatch.PlayerProfile Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Id__ = default(global::System.Guid);
            var __SkipTutorial__ = default(bool);
            var __MusicVolume__ = default(float);
            var __SFXVolume__ = default(float);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        __Id__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        continue;
                    case 12:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_SkipTutorial().Slice(1))) { goto FAIL; }

                        __SkipTutorial__ = reader.ReadBoolean();
                        continue;
                    case 11:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_MusicVolume().Slice(1))) { goto FAIL; }

                        __MusicVolume__ = reader.ReadSingle();
                        continue;
                    case 9:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_SFXVolume().Slice(1))) { goto FAIL; }

                        __SFXVolume__ = reader.ReadSingle();
                        continue;

                }
            }

            var ____result = new global::Assets.Scripts.OmaWatch.PlayerProfile()
            {
                Id = __Id__,
                SkipTutorial = __SkipTutorial__,
                MusicVolume = __MusicVolume__,
                SFXVolume = __SFXVolume__,
            };

            reader.Depth--;
            return ____result;
        }
    }
}

